const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à-—Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
 */

const CACHE_DIR = path.join(__dirname, '../static/cache');
const MAX_AGE_DAYS = 30;

function clearOldCache() {
  console.log('üßπ Starting image cache cleanup...');
  
  if (!fs.existsSync(CACHE_DIR)) {
    console.log('‚ùå Cache directory not found');
    return;
  }
  
  const now = Date.now();
  const maxAgeMs = MAX_AGE_DAYS * 24 * 60 * 60 * 1000;
  let deletedCount = 0;
  let totalSize = 0;
  
  function processDirectory(dirPath) {
    try {
      const items = fs.readdirSync(dirPath);
      
      for (const item of items) {
        const itemPath = path.join(dirPath, item);
        const stats = fs.statSync(itemPath);
        
        if (stats.isDirectory()) {
          processDirectory(itemPath);
        } else if (stats.isFile()) {
          const age = now - stats.mtime.getTime();
          
          if (age > maxAgeMs) {
            try {
              fs.unlinkSync(itemPath);
              deletedCount++;
              totalSize += stats.size;
              console.log(`üóëÔ∏è Deleted: ${itemPath}`);
            } catch (err) {
              console.error(`‚ùå Error deleting ${itemPath}:`, err.message);
            }
          }
        }
      }
    } catch (err) {
      console.error(`‚ùå Error processing directory ${dirPath}:`, err.message);
    }
  }
  
  processDirectory(CACHE_DIR);
  
  const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
  console.log(`‚úÖ Cache cleanup completed!`);
  console.log(`üìä Deleted ${deletedCount} files`);
  console.log(`üíæ Freed ${totalSizeMB} MB of disk space`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  clearOldCache();
}

module.exports = { clearOldCache };
