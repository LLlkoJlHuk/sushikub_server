const sharp = require('sharp')
const path = require('path')
const fs = require('fs')

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL: ?w=width&h=height&q=quality&f=format
 */
const imageResizeMiddleware = async (req, res, next) => {
  console.log(`üñºÔ∏è Image middleware triggered for: ${req.path}`)
  console.log(`Query params:`, req.query)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const ext = path.extname(req.path).toLowerCase()
  const supportedFormats = ['.jpg', '.jpeg', '.png', '.webp', '.gif']
  
  if (!supportedFormats.includes(ext)) {
    console.log(`‚ùå Not an image format: ${ext}`)
    return next()
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
  const { w: width, h: height, q: quality = 85, f: format } = req.query
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ—Å–∞–π–∑–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
  if (!width && !height) {
    console.log(`‚ùå No resize parameters found`)
    return next()
  }
  
  console.log(`‚úÖ Processing image resize: ${width}x${height}, quality: ${quality}`)

  try {
    // –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    const originalPath = path.join(__dirname, '../static', req.path)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(originalPath)) {
      return res.status(404).json({ error: 'Image not found' })
    }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–µ–π
  const parsedPath = path.parse(originalPath)
  const version = Date.now() // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const cacheFileName = `${parsedPath.name}_${width || 'auto'}x${height || 'auto'}_q${quality}_v${version}.${format || 'webp'}`
  const cachePath = path.join(parsedPath.dir, 'cache', cacheFileName)

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫—ç—à–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const cacheDir = path.dirname(cachePath)
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true })
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // if (fs.existsSync(cachePath)) {
    //   return res.sendFile(cachePath)
    // }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(originalPath).metadata() 
    
    // –°–æ–∑–¥–∞–µ–º Sharp pipeline
    let sharpPipeline = sharp(originalPath)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Å–∞–π–∑ –í–°–ï–ì–î–ê –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º)
    if (width || height) {
      const targetWidth = width ? parseInt(width) : undefined
      const targetHeight = height ? parseInt(height) : undefined
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      console.log(`Resizing to: ${targetWidth}x${targetHeight}`)
      
      const resizeOptions = {
        width: targetWidth,
        height: targetHeight,
        fit: 'cover',
        position: 'center',
        withoutEnlargement: true, // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        background: { r: 255, g: 255, b: 255, alpha: 0 } // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
      }
      sharpPipeline = sharpPipeline.resize(resizeOptions)
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç
    const outputFormat = format || 'webp'
    const qualityValue = Math.max(10, Math.min(100, parseInt(quality)))

    switch (outputFormat) {
      case 'webp':
        sharpPipeline = sharpPipeline.webp({ quality: qualityValue })
        break
      case 'jpeg':
      case 'jpg':
        sharpPipeline = sharpPipeline.jpeg({ quality: qualityValue })
        break
      case 'png':
        sharpPipeline = sharpPipeline.png({ quality: qualityValue })
        break
      default:
        sharpPipeline = sharpPipeline.webp({ quality: qualityValue })
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    sharpPipeline
      .toBuffer()
      .then(async (buffer) => {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const processedMetadata = await sharp(buffer).metadata()
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`Image processed: ${req.path}`)
        console.log(`Original: ${metadata.width}x${metadata.height}`)
        console.log(`Processed: ${processedMetadata.width}x${processedMetadata.height}`)
        console.log(`Size: ${(buffer.length / 1024).toFixed(1)}KB`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        try {
          fs.writeFileSync(cachePath, buffer)
        } catch (err) {
          console.error('Cache write error:', err)
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Content-Type', `image/${outputFormat}`)
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate') // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à
        res.setHeader('Pragma', 'no-cache')
        res.setHeader('Expires', '0')
        res.setHeader('Content-Length', buffer.length.toString())
        res.setHeader('X-Image-Width', processedMetadata.width.toString())
        res.setHeader('X-Image-Height', processedMetadata.height.toString())
        res.setHeader('X-Original-Size', `${metadata.width}x${metadata.height}`)
        res.setHeader('X-Processed-Size', `${processedMetadata.width}x${processedMetadata.height}`)
        res.setHeader('X-Content-Optimized', 'true')
        res.setHeader('X-Sharp-Version', require('sharp').versions.sharp)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        res.end(buffer)
      })
      .catch((error) => {
        console.error('Error processing image:', error)
        console.error('Sharp pipeline error:', error.stack)
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        res.sendFile(originalPath)
      })

  } catch (error) {
    console.error('Image resize middleware error:', error)
    next()
  }
}

module.exports = imageResizeMiddleware
